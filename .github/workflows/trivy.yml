# Deploy cloud - IBM Code Engine

name: Scan deployed images with trivy

# Controls when the action will run.
on:
  schedule:
    # At 12:29 on day-of-month 8”
    - cron: '29 12 8 * *'
    
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  # Build & deploy
  build:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Install IBM Cloud CLI
        run: curl -fsSL https://clis.cloud.ibm.com/install/linux | sh

      - name: Install Code Engine plugin
        run: |
          ibmcloud plugin install code-engine
          ibmcloud plugin install container-registry

      - name: Show IBM CLI version
        run: ibmcloud -v

      - name: Login to IBM Cloud
        env:
          IBM_CLOUD_APIKEY: ${{ secrets.IBM_CLOUD_APIKEY }}
          IBM_CLOUD_GROUP: ${{ vars.IBM_CLOUD_GROUP }}
          IBM_REGION: ${{ vars.IBM_REGION }}
          IBM_CR_REGION: ${{ vars.IBM_CR_REGION }}
        run: |
          ibmcloud login --apikey ${IBM_CLOUD_APIKEY} -g ${IBM_CLOUD_GROUP} -r ${IBM_REGION}
          ibmcloud cr region-set ${IBM_CR_REGION}
          ibmcloud cr login

      - name: Select the project
        env:
          CE_PROJECT: ${{ vars.CE_PROJECT }}
        run: ibmcloud ce project select --name ${CE_PROJECT}

      - name: Get UI image
        id: ui-image
        env:
          CE_APP_NAME: ${{ vars.CE_APP_NAME }}
        run: echo "IMAGE=$(ibmcloud ce app get --output json --name ${CE_APP_NAME} | jq -r '.spec.template.spec.containers[0].image[8:]')" >> "$GITHUB_OUTPUT"

      - name: Get services image
        id: services-image
        env:
          CE_APP_NAME: ${{ vars.CE_APP_NAME_BE }}
        run: echo "IMAGE=$(ibmcloud ce app get --output json --name ${CE_APP_NAME} | jq -r '.spec.template.spec.containers[0].image[8:]')" >> "$GITHUB_OUTPUT"

      - name: Vulnerability scan (ui)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{ steps.ui-image.outputs.IMAGE }}'
          format: 'table'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          output: 'results-ui.md'

      - name: Vulnerability scan (services)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: '${{ steps.services-image.outputs.IMAGE }}'
          format: 'table'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          output: 'results-services.md'

      - name: combine results
        id: results
        run: |
          ls -la
          ls -la $HOME/.local/bin/trivy-bin/contrib
          cat results-ui.md results-services.md > results.md
          echo "RESULTS=$(<results.md)"  >> "$GITHUB_OUTPUT"

      - uses: octokit/request-action@v2.x
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          route: PATCH /repos/davidnixon/vulnerability-dashboard/issues/1
          body: ${{ toJSON(steps.results.outputs.IMAGE) }}
